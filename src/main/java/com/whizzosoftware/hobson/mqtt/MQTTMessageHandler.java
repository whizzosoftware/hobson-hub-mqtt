/*******************************************************************************
 * Copyright (c) 2015 Whizzo Software, LLC.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package com.whizzosoftware.hobson.mqtt;

import com.whizzosoftware.hobson.ipsoso.json.JSONParser;
import org.json.JSONObject;

import java.util.regex.Pattern;

/**
 * Class responsible for processing incoming MQTT messages. Examples are device registration and device data
 * submission messages.
 *
 * @author Dan Noguerol
 */
public class MQTTMessageHandler {
    private MQTTMessageSink sink;
    private MQTTEventListener listener;
    private Pattern deviceDataTopicPattern = Pattern.compile("^devices/.*/data$");
    private JSONParser smartObjectParser = new JSONParser();

    /**
     * Constructor.
     *
     * @param sink the transport to use for sending response messages
     * @param listener the listener to notify of events generated by incoming messages
     */
    public MQTTMessageHandler(MQTTMessageSink sink, MQTTEventListener listener) {
        this.sink = sink;
        this.listener = listener;
    }

    /**
     * Called when an MQTT message is received.
     *
     * @param topic the topic the message was received on
     * @param json the JSON payload of the message
     */
    public void onMessage(String topic, JSONObject json) {
        if ("devices/register".equals(topic)) {
            String id = json.getString("id");

            // alert listener of the device registration
            listener.onDeviceRegistration(id, json.getString("name"), smartObjectParser.parseObjectCollection(json.getJSONObject("data")));

            // create JSON response message
            JSONObject res = new JSONObject();
            res.put("interval", "30");
            JSONObject topics = new JSONObject();
            topics.put("data", "devices/" + id + "/data");
            topics.put("control", "devices/" + id + "/control");
            res.put("topics", topics);

            // send response message
            sink.sendMessage("devices/" + id + "/registrations", res);
        } else if (deviceDataTopicPattern.matcher(topic).matches()) {
            // alert listener of received data
            int ix = topic.indexOf('/') + 1;
            listener.onDeviceData(topic.substring(ix, topic.indexOf('/', ix)), smartObjectParser.parseObjectCollection(json));
        }
    }
}
